<template>
  <div>
    <nuxt-child />
    <div v-if="!isChildShown" class="postwrap">
      <div class="posttitle">
        <a class="backbutton" href="#" @click.prevent="$router.go(-1)">
          <svg
            width="46"
            height="46"
            viewBox="0 0 46 46"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <g clip-path="url(#clip0)">
              <path
                d="M24.2334 27.2964L19.9685 23.0315L24.5 18.5"
                stroke="#b277ef"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </g>
            <rect
              x="1"
              y="1"
              width="44"
              height="44"
              rx="22"
              stroke="#b277ef"
              stroke-width="2"
            />
            <defs>
              <clipPath id="clip0">
                <rect
                  width="24"
                  height="24"
                  fill="#b277ef"
                  transform="matrix(-1 0 0 1 35 11)"
                />
              </clipPath>
            </defs>
          </svg>
        </a>
        <h1>{{ post.title }}</h1>
      </div>
      <div v-if="post.isPublic || isActSub || mine" class="postbody">
        <div class="postdescr">
          <h2>{{ post.description }}</h2>
        </div>
        <div class="postimages">
          <div v-for="im in post.images" :key="im.filename" class="image">
            <img :src="`${publicUrl}/media/${im.filename}`" alt="" />
          </div>
        </div>
        <div class="postvideos">
          <div v-for="vid in post.videos" :key="vid.filename" class="video">
            <video
              controls
              :src="`${publicUrl}/media/${vid.filename}`"
              alt=""
            ></video>
          </div>
        </div>
        <div class="comments">
          <comments :obj="post" :key="post._id" />
        </div>
      </div>
      <div class="postbody" v-else>
        <div class="notsub">
          Вы не подписаны. Для того, чтобы иметь возможность просматривать
          непубличные посты модели, необходимо подписаться.
          <button @click.prevent="showSubscribePopup">Подписаться</button>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
import { mapState, mapActions, mapGetters } from "vuex";
import SubscribePopup from "../../../../components/modals/SubscribePopup.vue";
import Comments from "@/components/page-parts/comments/Comments.vue";

export default {
  name: "PostPage",
  components: { Comments },
  async asyncData({ store, route, redirect, error }) {
    if (!route.params.postid) {
      redirect("/");
    }
    // if (!store.state.user.user) {
    //   error({ statusCode: 401, message: "Требуется авторизация" });
    // }
    const post = await store.dispatch("model/getPost", {
      id: route.params.postid,
    });
    if (!post.post || (post && post.type === "error")) {
      error({ statusCode: post.code, message: "Пост не найден" });
      return;
    }

    let mine = false;
    let author = null;
    if (
      store.state.user.user &&
      store.state.user.user._id === post.post.userId._id
    ) {
      mine = true;
      author = store.state.user.user;
    }

    let isActiveSubscription = false;
    if (!mine) {
      isActiveSubscription = store.getters["subscribe/isActiveSubscription"](
        post.post.userId._id
      );
      author = await store.dispatch("user/getUserById", {
        id: post.post.userId._id,
      });
    }
    // if (
    //   store.state.user.user &&
    //   store.state.user.user._id === route.params.id
    // ) {
    //   redirect("/");
    // }
    return { post: post.post, mine, isActiveSub: isActiveSubscription, author };
  },
  computed: {
    ...mapState("user", ["user"]),
    ...mapGetters("user", ["auth"]),
    ...mapGetters("subscribe", ["isActiveSubscription"]),
    isChildShown() {
      return this.$route.name === "Profile-id-post-postid-edit";
    },
    isActSub() {
      return this.isActiveSub || this.isActiveSubscription(this.author._id);
    },
    publicUrl() {
      return process.env.PUBLIC_URL;
    },
  },
  methods: {
    showSubscribePopup() {
      if (!this.auth) {
        this.$notify.info({
          message: "Вам нужно авторизоваться для этого действия",
        });
        return false;
      }
      if (this.user && this.user.role !== "user") {
        this.$notify.info({
          message: "Подписка доступна только обычным пользователям",
        });
        return false;
      }
      // this.$modal.show(
      //   SubscribePopup,
      //   { id: this.profile._id },
      //   { adaptive: true, width: "50%" }
      // );
      this.$vfm.show({
        component: SubscribePopup,
        bind: { id: this.author._id },
      });
    },
  },
  mounted() {
    console.log(this.isChildShown);
  },
};
</script>
<style lang="scss" scoped>
.postwrap {
  padding: 0.75rem 2rem 0.75rem 2rem;
}
.postbody {
  padding: 0.75rem 1.5rem 0.75rem 1.5rem;
  background-color: rgba(213, 219, 231, 0.24);
  border-radius: 30px;
}
.posttitle {
  margin-top: 1rem;
  display: flex;
  align-items: center;
  .backbutton {
    display: inline-block;
    // background: #000 url("@/assets/svg/back.svg") no-repeat center;
    // background: #000 url("@/assets/svg/back.svg") no-repeat center;
    // width: 60px;
    // height: 60px;
  }
  h1 {
    margin-left: 1rem;
    font-weight: 300;
  }
}
.postdescr {
  margin-top: 0.75rem;
  margin-bottom: 1.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  h2 {
    font-weight: 300;
  }
}
.video {
  video {
    max-width: 100%;
    min-width: 50%;
    margin-top: 0.75rem;
  }
}
.image {
  img {
    max-width: 100%;
    max-height: 1080px;
    margin-top: 0.75rem;
  }
}
.notsub {
  display: flex;
  flex-direction: column;
  align-items: center;
  /* position: absolute; */
  /* top: 50%; */
  margin-top: auto;
  /* margin: 50px; */
  background: #fff;
  /* z-index: 1000; */
  border: 1px solid #b87cf1;
  /* border-radius: 20px; */
  border-radius: 20px;
  padding: 30px;
  /* transform: translateY(-100%); */
  font-size: 1rem;
  button {
    display: block;
    color: #fff;
    font-weight: 500;
    font-size: 20px;
    border-radius: 36px;
    background: linear-gradient(272.29deg, #b277ef 0%, #dd94f9 98.03%);
    width: 255px;
    height: 54px;
    margin-right: 1rem;
    margin-top: 1rem;
  }
}
</style>
